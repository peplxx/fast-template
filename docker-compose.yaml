services:
  database:
    container_name: 'postgres'
    image: 'postgres:14'
    restart: always
    networks:
      - default
    env_file:
      - .env
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      POSTGRES_MAX_CONNECTIONS: 200
    volumes:
      - data:/var/lib/postgresql/data
      - ./deploy/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 2s

  prometheus:
    container_name: 'prometheus'
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090
    networks:
      - default
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yaml

  grafana: # login: admin, password: admin
    container_name: 'grafana'
    image: grafana/grafana:7.5.7
    networks:
      - default
    ports:
      - 3333:3000
    volumes:
      - ./graphana/datasources:/etc/grafana/provisioning/datasources
      - ./graphana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana

  backend:
    container_name: 'backend'
    networks:
      - default
    depends_on:
      database:
        condition: service_healthy
    restart: always
    env_file: .env
    environment:
      - POSTGRES_HOST=database
    build: ./backend
    volumes:
      - ./certs:/etc/ssl
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    command: [ "sh", "-c", "poetry run alembic upgrade head && poetry run python -m app" ]

  nginx:
    container_name: 'nginx'
    image: nginx:latest
    ports:
      - "80:80" # HTTP
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf # Dev Nginx configuration
      - ./certs:/etc/ssl # SSL certificates
    depends_on:
      - backend

networks:
  default:
volumes:
  data:
  prometheus-data:
  grafana-data: