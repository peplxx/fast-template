services:
  # Backend Database
  database:
    container_name: 'postgres'
    image: 'postgres:17.4-alpine'
    restart: always
    networks:
      - default
    environment:
      - POSTGRES_HOST=localhost
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MAX_CONNECTIONS=200
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - data:/var/lib/postgresql/data
      - ./deploy/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 2s

  # Backend service
  backend:
    container_name: 'backend'
    networks:
      - default
    depends_on:
      database:
        condition: service_healthy
    restart: always
    env_file: .env
    environment:
      - POSTGRES_HOST=database
    build: ./backend
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    command: [ "sh", "-c", "poetry run alembic upgrade head && poetry run python -m app" ]

  # Reverse Proxing
  # HTTP:
  nginx-http:
    container_name: 'nginx'
    profiles: [http]
    image: nginx:1.27.4-alpine
    env_file: .env
    ports:
      - "80:80"
    volumes:
      - ./nginx/default-http.conf:/etc/nginx/templates/default.conf.template
    depends_on:
      - backend
  
  # HTTPS:
  nginx-https:
    container_name: 'nginx'
    profiles: [https]
    image: nginx:1.27.4-alpine
    env_file: .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default-https.conf:/etc/nginx/templates/default.conf.template
      - ./certs:/etc/ssl
    depends_on:
      - backend

  # Monitoring (Prometheus + Graphana)
  prometheus:
    container_name: 'prometheus'
    image: prom/prometheus:v3.2.1
    profiles: [monitoring]
    ports:
      - 9090:9090
    networks:
      - default
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yaml

  grafana: # Default login: admin, password: admin
    container_name: 'grafana'
    image: grafana/grafana:11.6.0
    profiles: [monitoring]
    ports:
      - 3333:3000
    networks:
      - default
    volumes:
      - ./graphana/datasources:/etc/grafana/provisioning/datasources
      - ./graphana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana

  # Backups
  pgbackups:
    image: prodrigestivill/postgres-backup-local:17-alpine-437f2e9
    profiles: [backups]
    restart: always
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    depends_on:
      - database
    networks:
      - default
    volumes:
      - ./backups:/backups

networks:
  default:
    driver: bridge
  
volumes:
  data:
  prometheus-data:
  grafana-data: